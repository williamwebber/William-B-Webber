
# snake game python code
# William Webber

import turtle
import time
import random

delay = 0.1

#score var
score = 0
high_score = 0

#screen setup
wn = turtle.Screen()
wn.title("Snake Game by William Webber")
wn.bgcolor("indigo")
wn.setup(width=600, height=600)
wn.tracer(0)

#snake setup
head = turtle.Turtle()
head.speed(0)
head.shape("square")
head.color("white")
head.penup()
head.goto(0,0)
head.direction = "stop"

segments = []

pen = turtle.Turtle()
pen.speed(0)
pen.shape("square")
pen.color("cyan")
pen.penup()
pen.hideturtle()
pen.goto(0, 260)
pen.write("Score: 0      High Score: 0", align="center", font=("arial", 24, "normal"))

#food
food = turtle.Turtle()
food.speed(0)
food.shape("circle")
food.color("red")
food.penup()
food.goto(0,100)
food.direction = "stop"



#functions
def go_up():
    if head.direction != "down":
        head.direction = "up"
def go_down():
    if head.direction != "up":
        head.direction = "down"
def go_right():
    if head.direction != "left":
        head.direction = "right"
def go_left():
    if head.direction != "right":
        head.direction = "left"
def move():
    if head.direction == "up":
        y = head.ycor()
        head.sety(y + 20)
    if head.direction == "down":
        y = head.ycor()
        head.sety(y - 20)
    if head.direction == "right":
        x = head.xcor()
        head.setx(x + 20)
    if head.direction == "left":
        x = head.xcor()
        head.setx(x - 20)

#keyboard
wn.listen()
wn.onkeypress(go_up, "w")
wn.onkeypress(go_down, "s")
wn.onkeypress(go_right, "d")
wn.onkeypress(go_left, "a")

        #loop
while True:
    wn.update()

    #border
    if head.xcor()>295 or head.xcor()<-295 or head.ycor()>295 or head.ycor()<-295:
        time.sleep(1)
        head.goto(0,0)
        head.direction = "stop"

        for segment in segments:
            segment.goto(2000,2000)
        segments.clear()

        score = 0
        pen.clear()
        pen.write("Score: {}      High Score: {}".format(score, high_score), align="center",font=("arial", 24, "normal"))


    if head.distance(food) <20:    #food colision detection
        x = random.randint(-290,290)
        y = random.randint(-290,290)
        food.goto(x,y)

        #segments
        new_segment = turtle.Turtle()
        new_segment.speed(0)
        new_segment.shape("square")
        new_segment.color("grey")
        new_segment.penup()
        segments.append(new_segment)

        score += 10

        if score > high_score:
            high_score = score
        pen.clear()
        pen.write("Score: {}      High Score: {}".format(score, high_score), align="center", font=("arial", 24, "normal"))

    for index in range(len(segments)-1, 0, -1):
        x = segments[index-1].xcor()
        y = segments[index-1].ycor()
        segments[index].goto(x, y)

    if len(segments) > 0:
        x = head.xcor()
        y = head.ycor()
        segments[0].goto(x,y)

    move()

    for segment in segments:
        if segment.distance(head) <20:
            time.sleep(1)
            head.goto(0,0)
            head.direction = "stop"

            for segment in segments:
                segment.goto(2000, 2000)
            segments.clear()
            score = 0
            pen.clear()
            pen.write("Score: {}      High Score: {}".format(score, high_score), align="center", font=("arial", 24, "normal"))


    time.sleep(delay)



wn.mainloop()
